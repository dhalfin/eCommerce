{"ast":null,"code":"var _jsxFileName = \"D:\\\\pcs_frontend\\\\khalfin_dinar_pcs_frontend_21_01_homeworks\\\\project\\\\eCommerce\\\\src\\\\App.js\";\nimport React, { Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { uploadDataToStore, updateCart } from './store/action_creatores'; // для пропсов\n\nimport pageElements from './router/router'; // это все загружаемые страницы из роутера\n\nimport Spinner from './components/spinner';\nimport MobileNav from './components/MobileNav/mobile_nav';\nimport HeaderMain from './components/HeaderMain/HeaderMain';\nimport NewsletterMain from './components/NewsletterMain/NewsletterMain';\nimport FooterMain from './components/FooterMain/FooterMain';\nimport ScrollToTopBtn from \"./components/scroll/scrollToTop\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.uploadDataToStore(\"catalog\");\n    this.props.uploadDataToStore(\"brands\");\n    this.props.uploadDataToStore(\"colors\");\n    this.props.uploadDataToStore(\"prices\");\n    this.props.uploadDataToStore(\"categories\");\n\n    if (localStorage.cartInfo === undefined) {\n      localStorage.setItem(`cartInfo`, JSON.stringify([])); // if localstorage is empty\n    } else {\n      this.props.updateCart(JSON.parse(localStorage.getItem('cartInfo'))); // otherwise copy localstorage into the state\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(BrowserRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-content-wrapper d-flex clearfix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MobileNav, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(HeaderMain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Suspense, {\n      fallback: /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, pageElements)), /*#__PURE__*/React.createElement(NewsletterMain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FooterMain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ScrollToTopBtn, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\n;\n\nconst mapStateToProps = () => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    uploadDataToStore: actions => dispatch(uploadDataToStore(actions)),\n    updateCart: cart => dispatch(updateCart(cart))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["D:/pcs_frontend/khalfin_dinar_pcs_frontend_21_01_homeworks/project/eCommerce/src/App.js"],"names":["React","Suspense","connect","BrowserRouter","uploadDataToStore","updateCart","pageElements","Spinner","MobileNav","HeaderMain","NewsletterMain","FooterMain","ScrollToTopBtn","App","Component","componentDidMount","props","localStorage","cartInfo","undefined","setItem","JSON","stringify","parse","getItem","render","mapStateToProps","mapDispatchToProps","dispatch","actions","cart"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,0BAA9C,C,CAA0E;;AAC1E,OAAOC,YAAP,MAAyB,iBAAzB,C,CAA4C;;AAC5C,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAGA,MAAMC,GAAN,SAAkBb,KAAK,CAACc,SAAxB,CAAkC;AAE9BC,EAAAA,iBAAiB,GAAG;AAEhB,SAAKC,KAAL,CAAWZ,iBAAX,CAA6B,SAA7B;AACA,SAAKY,KAAL,CAAWZ,iBAAX,CAA6B,QAA7B;AACA,SAAKY,KAAL,CAAWZ,iBAAX,CAA6B,QAA7B;AACA,SAAKY,KAAL,CAAWZ,iBAAX,CAA6B,QAA7B;AACA,SAAKY,KAAL,CAAWZ,iBAAX,CAA6B,YAA7B;;AAEA,QAAIa,YAAY,CAACC,QAAb,KAA0BC,SAA9B,EAAyC;AACrCF,MAAAA,YAAY,CAACG,OAAb,CAAsB,UAAtB,EAAiCC,IAAI,CAACC,SAAL,CAAe,EAAf,CAAjC,EADqC,CACiB;AACzD,KAFD,MAEO;AACH,WAAKN,KAAL,CAAWX,UAAX,CAAsBgB,IAAI,CAACE,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,UAArB,CAAX,CAAtB,EADG,CACkE;AACxE;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,QAAD;AAAU,MAAA,QAAQ,eAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMnB,YADN,CAHJ,CADJ,eAQI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,eASI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,eAUI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,CADJ;AAcH;;AAhC6B;;AAiCjC;;AAED,MAAMoB,eAAe,GAAG,MAAM;AAC1B,SAAO,EAAP;AAGH,CAJD;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHxB,IAAAA,iBAAiB,EAAGyB,OAAD,IAAaD,QAAQ,CAACxB,iBAAiB,CAACyB,OAAD,CAAlB,CADrC;AAEHxB,IAAAA,UAAU,EAAGyB,IAAD,IAAUF,QAAQ,CAACvB,UAAU,CAACyB,IAAD,CAAX;AAF3B,GAAP;AAIH,CALD;;AAOA,eAAe5B,OAAO,CAACwB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6Cd,GAA7C,CAAf","sourcesContent":["import React, { Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { uploadDataToStore, updateCart } from './store/action_creatores'; // для пропсов\r\nimport pageElements from './router/router'; // это все загружаемые страницы из роутера\r\nimport Spinner from './components/spinner';\r\nimport MobileNav from './components/MobileNav/mobile_nav';\r\nimport HeaderMain from './components/HeaderMain/HeaderMain';\r\nimport NewsletterMain from './components/NewsletterMain/NewsletterMain';\r\nimport FooterMain from './components/FooterMain/FooterMain';\r\nimport ScrollToTopBtn from \"./components/scroll/scrollToTop\";\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.uploadDataToStore(\"catalog\");\r\n        this.props.uploadDataToStore(\"brands\");\r\n        this.props.uploadDataToStore(\"colors\");\r\n        this.props.uploadDataToStore(\"prices\");\r\n        this.props.uploadDataToStore(\"categories\");\r\n\r\n        if (localStorage.cartInfo === undefined) {\r\n            localStorage.setItem(`cartInfo`, JSON.stringify([])); // if localstorage is empty\r\n        } else {\r\n            this.props.updateCart(JSON.parse(localStorage.getItem('cartInfo'))); // otherwise copy localstorage into the state\r\n        }       \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <div className=\"main-content-wrapper d-flex clearfix\">\r\n                    <MobileNav />\r\n                    <HeaderMain />\r\n                    <Suspense fallback={<Spinner />}>\r\n                        { pageElements }\r\n                    </Suspense>\r\n                </div>\r\n                <NewsletterMain />\r\n                <FooterMain />\r\n                <ScrollToTopBtn />\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = () => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        uploadDataToStore: (actions) => dispatch(uploadDataToStore(actions)),\r\n        updateCart: (cart) => dispatch(updateCart(cart)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}