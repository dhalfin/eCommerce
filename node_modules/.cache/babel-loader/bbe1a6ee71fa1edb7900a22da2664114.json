{"ast":null,"code":"var _jsxFileName = \"D:\\\\pcs_frontend\\\\khalfin_dinar_pcs_frontend_21_01_homeworks\\\\project\\\\eCommerce\\\\src\\\\components\\\\dropdown\\\\DropDown.jsx\";\nimport React, { useState } from 'react';\nimport * as PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateItemOnPage, updateSortOnPage } from '../../store/action_creatores';\nDropDown.propTypes = {\n  itemsOnPage: PropTypes.string,\n  sortOnPage: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  // лэйбл выпадашки\n  name: PropTypes.string,\n  updateItemOnPage: PropTypes.func,\n  updateSortOnPage: PropTypes.func\n};\n\nfunction DropDown(props) {\n  const [isOpened, setIsOpened] = useState(false);\n  const {\n    itemsOnPage,\n    sortOnPage,\n    title,\n    name,\n    updateItemOnPage,\n    updateSortOnPage\n  } = props;\n  const sortOnPageList = ['Date', 'Newest', 'Popular'];\n  const viewOnPageList = ['4', '8', '12'];\n  let current;\n  let lable;\n\n  if (title === \"View\") {\n    current = viewOnPageList;\n    lable = itemsOnPage;\n  } else {\n    current = sortOnPageList;\n    lable = sortOnPage;\n  }\n\n  ;\n\n  function renderOptions() {\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, current.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: current[index],\n        \"data-id\": index,\n        className: `option ${current === index && 'selected'}`,\n        onClick: e => {\n          handleChange(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }\n      }, item);\n    }));\n  }\n\n  ;\n\n  const handleChange = e => {\n    // changing the sorting element by clicking on the child\n    const index = e.target.getAttribute(\"data-id\");\n\n    if (name === \"sortBy\") {\n      updateSortOnPage(sortOnPageList[index]);\n    } else if (name === \"View\") {\n      updateItemOnPage(viewOnPageList[index]);\n    }\n\n    ;\n  };\n\n  function handleClick(e) {\n    setIsOpened(!isOpened);\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \" sort-by-date d-flex align-items-center mr-15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"form\", {\n    action: \"#\",\n    method: \"get\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `nice-select ${isOpened && \"open\"}`,\n    tabIndex: \"0\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"current\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, lable), renderOptions())));\n}\n\n;\n\nconst mapStateToProps = store => {\n  return {\n    itemsOnPage: store.app.itemsOnPage,\n    sortOnPage: store.app.sortOnPage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateItemOnPage: string => dispatch(updateItemOnPage(string)),\n    updateSortOnPage: string => dispatch(updateSortOnPage(string))\n  };\n};\n\nexport default React.memo(connect(mapStateToProps, mapDispatchToProps)(DropDown));","map":{"version":3,"sources":["D:/pcs_frontend/khalfin_dinar_pcs_frontend_21_01_homeworks/project/eCommerce/src/components/dropdown/DropDown.jsx"],"names":["React","useState","PropTypes","connect","updateItemOnPage","updateSortOnPage","DropDown","propTypes","itemsOnPage","string","sortOnPage","title","isRequired","name","func","props","isOpened","setIsOpened","sortOnPageList","viewOnPageList","current","lable","renderOptions","map","item","index","e","handleChange","target","getAttribute","handleClick","mapStateToProps","store","app","mapDispatchToProps","dispatch","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { updateItemOnPage, updateSortOnPage } from '../../store/action_creatores';\r\n\r\nDropDown.propTypes = {\r\n    itemsOnPage: PropTypes.string,\r\n    sortOnPage: PropTypes.string,\r\n    title: PropTypes.string.isRequired, // лэйбл выпадашки\r\n    name: PropTypes.string,\r\n    updateItemOnPage: PropTypes.func,\r\n    updateSortOnPage: PropTypes.func,\r\n};\r\n\r\nfunction DropDown(props) {\r\n\r\n    const [isOpened, setIsOpened] = useState(false);\r\n\r\n    const {\r\n        itemsOnPage,\r\n        sortOnPage,\r\n        title,\r\n        name,\r\n        updateItemOnPage,\r\n        updateSortOnPage,\r\n    } = props;\r\n\r\n    const sortOnPageList = ['Date', 'Newest', 'Popular'];\r\n    const viewOnPageList = ['4', '8', '12'];\r\n    let current;\r\n    let lable;\r\n\r\n    if (title === \"View\") {\r\n        current = viewOnPageList;\r\n        lable = itemsOnPage;\r\n    } else {\r\n        current = sortOnPageList;\r\n        lable = sortOnPage;\r\n    };\r\n\r\n    function renderOptions() {\r\n        return (\r\n            <ul className=\"list\">\r\n                {\r\n                    current.map((item, index) => {\r\n                        return (\r\n                            <li\r\n                                key={current[index]}\r\n                                data-id={index}\r\n                                className={`option ${current === index && 'selected'}`}\r\n                                onClick={(e) => { handleChange(e) }}\r\n                            >\r\n                                {item}\r\n                            </li>\r\n                        )\r\n                    }\r\n                    )\r\n                }\r\n            </ul>\r\n        )\r\n    };\r\n\r\n    const handleChange = (e) => { // changing the sorting element by clicking on the child\r\n        const index = e.target.getAttribute(\"data-id\");\r\n        if (name === \"sortBy\") {\r\n            updateSortOnPage(sortOnPageList[index]);\r\n        } else if (name === \"View\") {\r\n            updateItemOnPage(viewOnPageList[index]);\r\n        };\r\n    };\r\n\r\n    function handleClick(e) {\r\n\r\n        setIsOpened(!isOpened);\r\n    };\r\n\r\n    return (\r\n        <div className=\" sort-by-date d-flex align-items-center mr-15\">\r\n            <p>{title}</p>\r\n            <form action=\"#\" method=\"get\">\r\n                <div\r\n                    className={`nice-select ${isOpened && \"open\"}`}\r\n                    tabIndex=\"0\"\r\n                    onClick={handleClick}\r\n                >\r\n                    <span className=\"current\">\r\n                        {lable}\r\n                    </span>\r\n                    {\r\n                        renderOptions()\r\n                    }\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        itemsOnPage: store.app.itemsOnPage,\r\n        sortOnPage: store.app.sortOnPage,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateItemOnPage: (string) => dispatch(updateItemOnPage(string)),\r\n        updateSortOnPage: (string) => dispatch(updateSortOnPage(string)),\r\n    };\r\n};\r\n\r\nexport default React.memo(connect(mapStateToProps, mapDispatchToProps)(DropDown));"]},"metadata":{},"sourceType":"module"}